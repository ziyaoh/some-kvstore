// Code generated by protoc-gen-go. DO NOT EDIT.
// source: some_kvstore_rpc.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A log entry in Raft can be any of any of these types.
type CommandType int32

const (
	CommandType_CLIENT_REGISTRATION   CommandType = 0
	CommandType_INIT                  CommandType = 1
	CommandType_NOOP                  CommandType = 2
	CommandType_STATE_MACHINE_COMMAND CommandType = 3
)

var CommandType_name = map[int32]string{
	0: "CLIENT_REGISTRATION",
	1: "INIT",
	2: "NOOP",
	3: "STATE_MACHINE_COMMAND",
}

var CommandType_value = map[string]int32{
	"CLIENT_REGISTRATION":   0,
	"INIT":                  1,
	"NOOP":                  2,
	"STATE_MACHINE_COMMAND": 3,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{0}
}

// The possible responses to a client request
type ClientStatus int32

const (
	ClientStatus_OK                   ClientStatus = 0
	ClientStatus_NOT_LEADER           ClientStatus = 1
	ClientStatus_ELECTION_IN_PROGRESS ClientStatus = 2
	ClientStatus_CLUSTER_NOT_STARTED  ClientStatus = 3
	ClientStatus_REQ_FAILED           ClientStatus = 4
)

var ClientStatus_name = map[int32]string{
	0: "OK",
	1: "NOT_LEADER",
	2: "ELECTION_IN_PROGRESS",
	3: "CLUSTER_NOT_STARTED",
	4: "REQ_FAILED",
}

var ClientStatus_value = map[string]int32{
	"OK":                   0,
	"NOT_LEADER":           1,
	"ELECTION_IN_PROGRESS": 2,
	"CLUSTER_NOT_STARTED":  3,
	"REQ_FAILED":           4,
}

func (x ClientStatus) String() string {
	return proto.EnumName(ClientStatus_name, int32(x))
}

func (ClientStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{1}
}

// Used to represent result of an RPC call that can either be successful or
// unsuccessful.
type Ok struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ok) Reset()         { *m = Ok{} }
func (m *Ok) String() string { return proto.CompactTextString(m) }
func (*Ok) ProtoMessage()    {}
func (*Ok) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{0}
}

func (m *Ok) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ok.Unmarshal(m, b)
}
func (m *Ok) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ok.Marshal(b, m, deterministic)
}
func (m *Ok) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ok.Merge(m, src)
}
func (m *Ok) XXX_Size() int {
	return xxx_messageInfo_Ok.Size(m)
}
func (m *Ok) XXX_DiscardUnknown() {
	xxx_messageInfo_Ok.DiscardUnknown(m)
}

var xxx_messageInfo_Ok proto.InternalMessageInfo

func (m *Ok) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Ok) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Represents a node in the Raft cluster
type RemoteNode struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteNode) Reset()         { *m = RemoteNode{} }
func (m *RemoteNode) String() string { return proto.CompactTextString(m) }
func (*RemoteNode) ProtoMessage()    {}
func (*RemoteNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{1}
}

func (m *RemoteNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteNode.Unmarshal(m, b)
}
func (m *RemoteNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteNode.Marshal(b, m, deterministic)
}
func (m *RemoteNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteNode.Merge(m, src)
}
func (m *RemoteNode) XXX_Size() int {
	return xxx_messageInfo_RemoteNode.Size(m)
}
func (m *RemoteNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteNode.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteNode proto.InternalMessageInfo

func (m *RemoteNode) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *RemoteNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StartNodeRequest struct {
	// The node sending the request to start another node in the cluster
	FromNode *RemoteNode `protobuf:"bytes,1,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	// The list of nodes in the cluster that the new node should start up with
	NodeList             []*RemoteNode `protobuf:"bytes,2,rep,name=nodeList,proto3" json:"nodeList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StartNodeRequest) Reset()         { *m = StartNodeRequest{} }
func (m *StartNodeRequest) String() string { return proto.CompactTextString(m) }
func (*StartNodeRequest) ProtoMessage()    {}
func (*StartNodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{2}
}

func (m *StartNodeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartNodeRequest.Unmarshal(m, b)
}
func (m *StartNodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartNodeRequest.Marshal(b, m, deterministic)
}
func (m *StartNodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartNodeRequest.Merge(m, src)
}
func (m *StartNodeRequest) XXX_Size() int {
	return xxx_messageInfo_StartNodeRequest.Size(m)
}
func (m *StartNodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartNodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartNodeRequest proto.InternalMessageInfo

func (m *StartNodeRequest) GetFromNode() *RemoteNode {
	if m != nil {
		return m.FromNode
	}
	return nil
}

func (m *StartNodeRequest) GetNodeList() []*RemoteNode {
	if m != nil {
		return m.NodeList
	}
	return nil
}

type LogEntry struct {
	// Index of log entry (first index = 1)
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The term that this entry was in when added
	TermId uint64 `protobuf:"varint,2,opt,name=termId,proto3" json:"termId,omitempty"`
	// Type of command associated with this entry
	Type CommandType `protobuf:"varint,3,opt,name=type,proto3,enum=rpc.CommandType" json:"type,omitempty"`
	// Command associated with this log entry in the user's finite-state-machine.
	// Note that we only care about this value when type = STATE_MACHINE_COMMAND
	Command uint64 `protobuf:"varint,4,opt,name=command,proto3" json:"command,omitempty"`
	// Data associated with this log entry in the user's finite-state-machine.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// After processing this log entry, what ID to use when caching the
	// response. Use an empty string to not cache at all
	CacheId string `protobuf:"bytes,6,opt,name=cacheId,proto3" json:"cacheId,omitempty"`
	// Cache IDs of finished client requests for cluster to clean cache
	AckCacheIds          []string `protobuf:"bytes,7,rep,name=ackCacheIds,proto3" json:"ackCacheIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{3}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetTermId() uint64 {
	if m != nil {
		return m.TermId
	}
	return 0
}

func (m *LogEntry) GetType() CommandType {
	if m != nil {
		return m.Type
	}
	return CommandType_CLIENT_REGISTRATION
}

func (m *LogEntry) GetCommand() uint64 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *LogEntry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *LogEntry) GetCacheId() string {
	if m != nil {
		return m.CacheId
	}
	return ""
}

func (m *LogEntry) GetAckCacheIds() []string {
	if m != nil {
		return m.AckCacheIds
	}
	return nil
}

type AppendEntriesRequest struct {
	// The leader's term
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// Address of the leader sending this request
	Leader *RemoteNode `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// The index of the log entry immediately preceding the new ones
	PrevLogIndex uint64 `protobuf:"varint,3,opt,name=prevLogIndex,proto3" json:"prevLogIndex,omitempty"`
	// The term of the log entry at prevLogIndex
	PrevLogTerm uint64 `protobuf:"varint,4,opt,name=prevLogTerm,proto3" json:"prevLogTerm,omitempty"`
	// The log entries the follower needs to store. Empty for heartbeat messages.
	Entries []*LogEntry `protobuf:"bytes,5,rep,name=entries,proto3" json:"entries,omitempty"`
	// The leader's commitIndex
	LeaderCommit         uint64   `protobuf:"varint,6,opt,name=leaderCommit,proto3" json:"leaderCommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesRequest) Reset()         { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()    {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{4}
}

func (m *AppendEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesRequest.Unmarshal(m, b)
}
func (m *AppendEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesRequest.Marshal(b, m, deterministic)
}
func (m *AppendEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesRequest.Merge(m, src)
}
func (m *AppendEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesRequest.Size(m)
}
func (m *AppendEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesRequest proto.InternalMessageInfo

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeader() *RemoteNode {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommit() uint64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesReply struct {
	// The current term, for leader to update itself.
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// True if follower contained entry matching prevLogIndex and prevLogTerm.
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesReply) Reset()         { *m = AppendEntriesReply{} }
func (m *AppendEntriesReply) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesReply) ProtoMessage()    {}
func (*AppendEntriesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{5}
}

func (m *AppendEntriesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesReply.Unmarshal(m, b)
}
func (m *AppendEntriesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesReply.Marshal(b, m, deterministic)
}
func (m *AppendEntriesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesReply.Merge(m, src)
}
func (m *AppendEntriesReply) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesReply.Size(m)
}
func (m *AppendEntriesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesReply proto.InternalMessageInfo

func (m *AppendEntriesReply) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestVoteRequest struct {
	// The candidate's current term Id
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// The cadidate Id currently requesting a node to vote for it.
	Candidate *RemoteNode `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	// The index of the candidate's last log entry
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=lastLogIndex,proto3" json:"lastLogIndex,omitempty"`
	// The term of the candidate's last log entry
	LastLogTerm          uint64   `protobuf:"varint,4,opt,name=lastLogTerm,proto3" json:"lastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteRequest) Reset()         { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()    {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{6}
}

func (m *RequestVoteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteRequest.Unmarshal(m, b)
}
func (m *RequestVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteRequest.Marshal(b, m, deterministic)
}
func (m *RequestVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteRequest.Merge(m, src)
}
func (m *RequestVoteRequest) XXX_Size() int {
	return xxx_messageInfo_RequestVoteRequest.Size(m)
}
func (m *RequestVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteRequest proto.InternalMessageInfo

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidate() *RemoteNode {
	if m != nil {
		return m.Candidate
	}
	return nil
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteReply struct {
	// The current term, for candidate to update itsel
	Term uint64 `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	// True means candidate received vote
	VoteGranted          bool     `protobuf:"varint,2,opt,name=voteGranted,proto3" json:"voteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteReply) Reset()         { *m = RequestVoteReply{} }
func (m *RequestVoteReply) String() string { return proto.CompactTextString(m) }
func (*RequestVoteReply) ProtoMessage()    {}
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{7}
}

func (m *RequestVoteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteReply.Unmarshal(m, b)
}
func (m *RequestVoteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteReply.Marshal(b, m, deterministic)
}
func (m *RequestVoteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteReply.Merge(m, src)
}
func (m *RequestVoteReply) XXX_Size() int {
	return xxx_messageInfo_RequestVoteReply.Size(m)
}
func (m *RequestVoteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteReply proto.InternalMessageInfo

func (m *RequestVoteReply) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReply) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

// Empty message represents that a client needs to send no data over to
// register itself.
type RegisterClientRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterClientRequest) Reset()         { *m = RegisterClientRequest{} }
func (m *RegisterClientRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterClientRequest) ProtoMessage()    {}
func (*RegisterClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{8}
}

func (m *RegisterClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterClientRequest.Unmarshal(m, b)
}
func (m *RegisterClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterClientRequest.Marshal(b, m, deterministic)
}
func (m *RegisterClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientRequest.Merge(m, src)
}
func (m *RegisterClientRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterClientRequest.Size(m)
}
func (m *RegisterClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientRequest proto.InternalMessageInfo

type RegisterClientReply struct {
	// OK if state machine registered client
	Status ClientStatus `protobuf:"varint,1,opt,name=status,proto3,enum=rpc.ClientStatus" json:"status,omitempty"`
	// Unique ID for client session
	ClientId uint64 `protobuf:"varint,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	// In cases where the client contacted a non-leader, the node should
	// reply with the correct current leader.
	LeaderHint           *RemoteNode `protobuf:"bytes,3,opt,name=leaderHint,proto3" json:"leaderHint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RegisterClientReply) Reset()         { *m = RegisterClientReply{} }
func (m *RegisterClientReply) String() string { return proto.CompactTextString(m) }
func (*RegisterClientReply) ProtoMessage()    {}
func (*RegisterClientReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{9}
}

func (m *RegisterClientReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterClientReply.Unmarshal(m, b)
}
func (m *RegisterClientReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterClientReply.Marshal(b, m, deterministic)
}
func (m *RegisterClientReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientReply.Merge(m, src)
}
func (m *RegisterClientReply) XXX_Size() int {
	return xxx_messageInfo_RegisterClientReply.Size(m)
}
func (m *RegisterClientReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientReply proto.InternalMessageInfo

func (m *RegisterClientReply) GetStatus() ClientStatus {
	if m != nil {
		return m.Status
	}
	return ClientStatus_OK
}

func (m *RegisterClientReply) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *RegisterClientReply) GetLeaderHint() *RemoteNode {
	if m != nil {
		return m.LeaderHint
	}
	return nil
}

type ClientRequest struct {
	// The unique client ID associated with this client session (received
	// via a previous RegisterClient call).
	ClientId uint64 `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	// A sequence number is associated to request to avoid duplicates
	SequenceNum uint64 `protobuf:"varint,2,opt,name=sequenceNum,proto3" json:"sequenceNum,omitempty"`
	// Command to be executed on the state machine; it may affect state
	StateMachineCmd uint64 `protobuf:"varint,4,opt,name=stateMachineCmd,proto3" json:"stateMachineCmd,omitempty"`
	// Data to accompany the command to the state machine; it may affect state
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Sequence numbers of finished client requests for cluster to clean cache
	AckSeqs              []uint64 `protobuf:"varint,6,rep,packed,name=ackSeqs,proto3" json:"ackSeqs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientRequest) Reset()         { *m = ClientRequest{} }
func (m *ClientRequest) String() string { return proto.CompactTextString(m) }
func (*ClientRequest) ProtoMessage()    {}
func (*ClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{10}
}

func (m *ClientRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientRequest.Unmarshal(m, b)
}
func (m *ClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientRequest.Marshal(b, m, deterministic)
}
func (m *ClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRequest.Merge(m, src)
}
func (m *ClientRequest) XXX_Size() int {
	return xxx_messageInfo_ClientRequest.Size(m)
}
func (m *ClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRequest proto.InternalMessageInfo

func (m *ClientRequest) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *ClientRequest) GetSequenceNum() uint64 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func (m *ClientRequest) GetStateMachineCmd() uint64 {
	if m != nil {
		return m.StateMachineCmd
	}
	return 0
}

func (m *ClientRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ClientRequest) GetAckSeqs() []uint64 {
	if m != nil {
		return m.AckSeqs
	}
	return nil
}

type ClientReply struct {
	// OK if state machine successfully applied command
	Status ClientStatus `protobuf:"varint,1,opt,name=status,proto3,enum=rpc.ClientStatus" json:"status,omitempty"`
	// State machine output, if successful
	Response []byte `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	// In cases where the client contacted a non-leader, the node should
	// reply with the correct current leader.
	LeaderHint           *RemoteNode `protobuf:"bytes,3,opt,name=leaderHint,proto3" json:"leaderHint,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ClientReply) Reset()         { *m = ClientReply{} }
func (m *ClientReply) String() string { return proto.CompactTextString(m) }
func (*ClientReply) ProtoMessage()    {}
func (*ClientReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b44a0779aa6d6, []int{11}
}

func (m *ClientReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientReply.Unmarshal(m, b)
}
func (m *ClientReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientReply.Marshal(b, m, deterministic)
}
func (m *ClientReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientReply.Merge(m, src)
}
func (m *ClientReply) XXX_Size() int {
	return xxx_messageInfo_ClientReply.Size(m)
}
func (m *ClientReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientReply.DiscardUnknown(m)
}

var xxx_messageInfo_ClientReply proto.InternalMessageInfo

func (m *ClientReply) GetStatus() ClientStatus {
	if m != nil {
		return m.Status
	}
	return ClientStatus_OK
}

func (m *ClientReply) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ClientReply) GetLeaderHint() *RemoteNode {
	if m != nil {
		return m.LeaderHint
	}
	return nil
}

func init() {
	proto.RegisterEnum("rpc.CommandType", CommandType_name, CommandType_value)
	proto.RegisterEnum("rpc.ClientStatus", ClientStatus_name, ClientStatus_value)
	proto.RegisterType((*Ok)(nil), "rpc.Ok")
	proto.RegisterType((*RemoteNode)(nil), "rpc.RemoteNode")
	proto.RegisterType((*StartNodeRequest)(nil), "rpc.StartNodeRequest")
	proto.RegisterType((*LogEntry)(nil), "rpc.LogEntry")
	proto.RegisterType((*AppendEntriesRequest)(nil), "rpc.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesReply)(nil), "rpc.AppendEntriesReply")
	proto.RegisterType((*RequestVoteRequest)(nil), "rpc.RequestVoteRequest")
	proto.RegisterType((*RequestVoteReply)(nil), "rpc.RequestVoteReply")
	proto.RegisterType((*RegisterClientRequest)(nil), "rpc.RegisterClientRequest")
	proto.RegisterType((*RegisterClientReply)(nil), "rpc.RegisterClientReply")
	proto.RegisterType((*ClientRequest)(nil), "rpc.ClientRequest")
	proto.RegisterType((*ClientReply)(nil), "rpc.ClientReply")
}

func init() { proto.RegisterFile("some_kvstore_rpc.proto", fileDescriptor_251b44a0779aa6d6) }

var fileDescriptor_251b44a0779aa6d6 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xc1, 0x72, 0xdb, 0x36,
	0x10, 0x35, 0x25, 0x59, 0x92, 0x57, 0x8e, 0xcd, 0xc0, 0x76, 0xcc, 0xe8, 0xc4, 0xe1, 0x74, 0x26,
	0x6a, 0xda, 0xa6, 0x1d, 0xe7, 0xdc, 0x83, 0x4a, 0xb3, 0x36, 0x1b, 0x99, 0x74, 0x41, 0xa6, 0x57,
	0x0e, 0x4a, 0x22, 0x36, 0x47, 0x12, 0xc1, 0x80, 0x90, 0xa7, 0xfa, 0x80, 0x1e, 0xfb, 0x09, 0x3d,
	0xe6, 0x5f, 0xfa, 0x25, 0xfd, 0x8a, 0x1e, 0x3a, 0x00, 0x21, 0x85, 0x52, 0xe5, 0xce, 0xb4, 0xb9,
	0x61, 0xdf, 0xee, 0xbe, 0xdd, 0x7d, 0xc2, 0x82, 0x82, 0x67, 0x15, 0x9b, 0xd3, 0x64, 0xfa, 0x50,
	0x09, 0xc6, 0x69, 0xc2, 0xcb, 0xf4, 0x55, 0xc9, 0x99, 0x60, 0xa8, 0xcd, 0xcb, 0xd4, 0xf9, 0x12,
	0x5a, 0xe1, 0x14, 0x1d, 0x41, 0x8b, 0x4d, 0x2d, 0xc3, 0x36, 0x46, 0x7d, 0xdc, 0x62, 0x53, 0xf4,
	0x0c, 0xba, 0x9c, 0x92, 0x8a, 0x15, 0x56, 0xcb, 0x36, 0x46, 0x07, 0x58, 0x5b, 0xce, 0x37, 0x00,
	0x98, 0xce, 0x99, 0xa0, 0x01, 0xcb, 0x28, 0x42, 0xd0, 0x21, 0x59, 0xc6, 0x55, 0xde, 0x01, 0x56,
	0x67, 0xc9, 0x94, 0x67, 0x3a, 0xab, 0x95, 0x67, 0xce, 0x0c, 0xcc, 0x48, 0x10, 0x2e, 0x64, 0x02,
	0xa6, 0xef, 0x17, 0xb4, 0x12, 0xe8, 0x0b, 0xe8, 0xbf, 0xe3, 0x6c, 0x2e, 0x21, 0x95, 0x3b, 0xb8,
	0x38, 0x7e, 0x25, 0xdb, 0xfa, 0x48, 0x8d, 0xd7, 0x01, 0x32, 0xb8, 0x60, 0x19, 0x9d, 0xe4, 0x95,
	0xb0, 0x5a, 0x76, 0x7b, 0x67, 0xf0, 0x2a, 0xc0, 0xf9, 0xc3, 0x80, 0xfe, 0x84, 0xdd, 0x79, 0x85,
	0xe0, 0x4b, 0x74, 0x0a, 0xfb, 0x79, 0x91, 0xd1, 0x5f, 0x54, 0x8d, 0x0e, 0xae, 0x0d, 0x39, 0x9a,
	0xa0, 0x7c, 0xee, 0xd7, 0x4d, 0x76, 0xb0, 0xb6, 0xd0, 0x67, 0xd0, 0x11, 0xcb, 0x92, 0x5a, 0x6d,
	0xdb, 0x18, 0x1d, 0x5d, 0x98, 0xaa, 0x86, 0xcb, 0xe6, 0x73, 0x52, 0x64, 0xf1, 0xb2, 0xa4, 0x58,
	0x79, 0x91, 0x05, 0xbd, 0xb4, 0x06, 0xad, 0x8e, 0x4a, 0x5f, 0x99, 0x52, 0x8c, 0x8c, 0x08, 0x62,
	0xed, 0xdb, 0xc6, 0xe8, 0x10, 0xab, 0xb3, 0x8a, 0x26, 0xe9, 0x3d, 0xf5, 0x33, 0xab, 0xab, 0x14,
	0x59, 0x99, 0xc8, 0x86, 0x01, 0x49, 0xa7, 0x6e, 0x6d, 0x55, 0x56, 0xcf, 0x6e, 0x8f, 0x0e, 0x70,
	0x13, 0x72, 0xfe, 0x34, 0xe0, 0x74, 0x5c, 0x96, 0xb4, 0xc8, 0xe4, 0x34, 0x39, 0xad, 0x56, 0xea,
	0x21, 0xe8, 0xc8, 0x96, 0xf5, 0x54, 0xea, 0x8c, 0x5e, 0x40, 0x77, 0x46, 0x49, 0x46, 0xb9, 0x1a,
	0x6a, 0x87, 0x44, 0xda, 0x8d, 0x1c, 0x38, 0x2c, 0x39, 0x7d, 0x98, 0xb0, 0x3b, 0x5f, 0x49, 0xd3,
	0x56, 0x24, 0x1b, 0x98, 0xec, 0x4d, 0xdb, 0xb1, 0xac, 0x53, 0xcf, 0xd9, 0x84, 0xd0, 0x0b, 0xe8,
	0xd1, 0xba, 0x29, 0x6b, 0x5f, 0xfd, 0x24, 0x4f, 0x54, 0xbd, 0x95, 0xf2, 0x78, 0xe5, 0x95, 0xe5,
	0xea, 0xc2, 0x52, 0xc9, 0x5c, 0x28, 0x15, 0x3a, 0x78, 0x03, 0x73, 0xbe, 0x03, 0xb4, 0x35, 0x67,
	0x39, 0x5b, 0xee, 0x9c, 0xd2, 0x82, 0x5e, 0xb5, 0x48, 0x53, 0x5a, 0x55, 0x6a, 0xcc, 0x3e, 0x5e,
	0x99, 0xce, 0xef, 0x06, 0x20, 0xad, 0xcf, 0x4f, 0x4c, 0xd0, 0x7f, 0x93, 0xea, 0x2b, 0x38, 0x48,
	0x49, 0x91, 0xe5, 0x19, 0x11, 0xf4, 0x31, 0xb5, 0x3e, 0x46, 0xa8, 0x09, 0x48, 0x25, 0xb6, 0x05,
	0x6b, 0x62, 0x52, 0x30, 0x6d, 0x37, 0x05, 0x6b, 0x40, 0xce, 0x35, 0x98, 0x1b, 0xed, 0x3d, 0x36,
	0xa1, 0x0d, 0x83, 0x07, 0x26, 0xe8, 0x15, 0x27, 0x85, 0xa0, 0x99, 0x9e, 0xb2, 0x09, 0x39, 0xe7,
	0x70, 0x86, 0xe9, 0x5d, 0x5e, 0x09, 0xca, 0xdd, 0x59, 0x4e, 0x0b, 0xa1, 0x79, 0x9d, 0xdf, 0x0c,
	0x38, 0xd9, 0xf6, 0xc8, 0x32, 0x9f, 0x43, 0xb7, 0x12, 0x44, 0x2c, 0x2a, 0x55, 0xe8, 0xe8, 0xe2,
	0x69, 0x7d, 0xb3, 0x55, 0x44, 0xa4, 0x1c, 0x58, 0x07, 0xa0, 0x21, 0xf4, 0x53, 0x85, 0xaf, 0x97,
	0x63, 0x6d, 0xa3, 0xaf, 0x01, 0xea, 0x5f, 0xed, 0x3a, 0x2f, 0x84, 0x52, 0x61, 0x87, 0x6e, 0x8d,
	0x10, 0xe7, 0x83, 0x01, 0x4f, 0x36, 0x3a, 0xdc, 0xa0, 0x37, 0xb6, 0xe8, 0x6d, 0x18, 0x54, 0x32,
	0xac, 0x48, 0x69, 0xb0, 0x98, 0xeb, 0xea, 0x4d, 0x08, 0x8d, 0xe0, 0x58, 0xb6, 0x49, 0x6f, 0x48,
	0x7a, 0x9f, 0x17, 0xd4, 0x9d, 0xaf, 0x36, 0x70, 0x1b, 0x7e, 0x6c, 0x13, 0x49, 0x3a, 0x8d, 0xe8,
	0xfb, 0xca, 0xea, 0xda, 0x6d, 0xb9, 0xb7, 0xda, 0x74, 0x7e, 0x35, 0x60, 0xf0, 0xff, 0xf5, 0xe2,
	0xb4, 0x2a, 0x59, 0x51, 0xd5, 0x37, 0xe9, 0x10, 0xaf, 0xed, 0xff, 0xac, 0xd7, 0xcb, 0xb7, 0x30,
	0x68, 0x3c, 0x37, 0xe8, 0x1c, 0x4e, 0xdc, 0x89, 0xef, 0x05, 0x71, 0x82, 0xbd, 0x2b, 0x3f, 0x8a,
	0xf1, 0x38, 0xf6, 0xc3, 0xc0, 0xdc, 0x43, 0x7d, 0xe8, 0xf8, 0x81, 0x1f, 0x9b, 0x86, 0x3c, 0x05,
	0x61, 0x78, 0x6b, 0xb6, 0xd0, 0x73, 0x38, 0x8b, 0xe2, 0x71, 0xec, 0x25, 0x37, 0x63, 0xf7, 0xda,
	0x0f, 0xbc, 0xc4, 0x0d, 0x6f, 0x6e, 0xc6, 0xc1, 0xa5, 0xd9, 0x7e, 0x99, 0xc3, 0x61, 0xb3, 0x77,
	0xd4, 0x85, 0x56, 0xf8, 0xc6, 0xdc, 0x43, 0x47, 0x00, 0x41, 0x18, 0x27, 0x13, 0x6f, 0x7c, 0xe9,
	0x61, 0xd3, 0x40, 0x16, 0x9c, 0x7a, 0x13, 0xcf, 0x95, 0x45, 0x12, 0x3f, 0x48, 0x6e, 0x71, 0x78,
	0x85, 0xbd, 0x28, 0x32, 0x5b, 0x75, 0x27, 0x6f, 0xa3, 0xd8, 0xc3, 0x89, 0xcc, 0x88, 0xe2, 0x31,
	0x8e, 0xbd, 0x4b, 0xb3, 0x2d, 0x29, 0xb0, 0xf7, 0x63, 0xf2, 0xfd, 0xd8, 0x9f, 0x78, 0x97, 0x66,
	0xe7, 0xe2, 0x2f, 0x03, 0x7a, 0x98, 0xbc, 0x13, 0xf8, 0xd6, 0x45, 0x23, 0x80, 0x1f, 0x58, 0x5e,
	0xb8, 0x64, 0x36, 0xa3, 0x1c, 0x6d, 0x0f, 0x3e, 0xec, 0x29, 0x20, 0x9c, 0x3a, 0x7b, 0xe8, 0x35,
	0x1c, 0xaf, 0x3f, 0x10, 0x3a, 0xfc, 0x4c, 0x79, 0xb7, 0x3f, 0x1b, 0xcd, 0xa4, 0x37, 0x70, 0xb2,
	0xf1, 0x66, 0xe8, 0xc4, 0xe7, 0x2a, 0x62, 0xd7, 0xab, 0x39, 0x3c, 0xdf, 0xe5, 0x2a, 0x67, 0x4b,
	0x67, 0x0f, 0x79, 0xf0, 0xb4, 0xb1, 0x9c, 0x9a, 0xea, 0x5c, 0xb7, 0xbc, 0xfd, 0xa6, 0x0c, 0xcf,
	0xfe, 0xe9, 0x50, 0x34, 0x17, 0xb1, 0xdc, 0xbf, 0x72, 0x96, 0xa7, 0x44, 0xe4, 0xac, 0xb8, 0xe2,
	0x6c, 0x51, 0x4a, 0x25, 0xbe, 0x85, 0x93, 0x8d, 0x35, 0xd0, 0xfc, 0xa8, 0x71, 0xad, 0x56, 0xd4,
	0xe6, 0x06, 0x56, 0xb3, 0x7e, 0x30, 0xe0, 0x34, 0xba, 0x27, 0x3c, 0x0b, 0x79, 0x7a, 0x4f, 0x2b,
	0xc1, 0x89, 0x60, 0x5c, 0xf2, 0x06, 0x70, 0xba, 0xb9, 0xee, 0x9a, 0x78, 0xa8, 0xfb, 0xdb, 0xf1,
	0x46, 0x0c, 0xad, 0x9d, 0xbe, 0x5a, 0x85, 0x4f, 0xeb, 0xf3, 0xe7, 0xae, 0xfa, 0x4f, 0xf1, 0xfa,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0xde, 0xb2, 0xb2, 0x6d, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftRPCClient is the client API for RaftRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftRPCClient interface {
	// Used when a node in the cluster is first starting up so it can notify a
	// leader what their listening address is.
	JoinCaller(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*Ok, error)
	// Once the first node in the cluster has all of the addresses for all other
	// nodes in the cluster it can then tell them to transition into Follower
	// state and start the Raft protocol.
	StartNodeCaller(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*Ok, error)
	// Invoked by leader to replicate log entries; also used as a heartbeat
	// between leaders and followers.
	AppendEntriesCaller(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesReply, error)
	// Invoked by candidate nodes to request votes from other nodes.
	RequestVoteCaller(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteReply, error)
}

type raftRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftRPCClient(cc grpc.ClientConnInterface) RaftRPCClient {
	return &raftRPCClient{cc}
}

func (c *raftRPCClient) JoinCaller(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/rpc.RaftRPC/JoinCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) StartNodeCaller(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/rpc.RaftRPC/StartNodeCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) AppendEntriesCaller(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/rpc.RaftRPC/AppendEntriesCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRPCClient) RequestVoteCaller(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/rpc.RaftRPC/RequestVoteCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftRPCServer is the server API for RaftRPC service.
type RaftRPCServer interface {
	// Used when a node in the cluster is first starting up so it can notify a
	// leader what their listening address is.
	JoinCaller(context.Context, *RemoteNode) (*Ok, error)
	// Once the first node in the cluster has all of the addresses for all other
	// nodes in the cluster it can then tell them to transition into Follower
	// state and start the Raft protocol.
	StartNodeCaller(context.Context, *StartNodeRequest) (*Ok, error)
	// Invoked by leader to replicate log entries; also used as a heartbeat
	// between leaders and followers.
	AppendEntriesCaller(context.Context, *AppendEntriesRequest) (*AppendEntriesReply, error)
	// Invoked by candidate nodes to request votes from other nodes.
	RequestVoteCaller(context.Context, *RequestVoteRequest) (*RequestVoteReply, error)
}

// UnimplementedRaftRPCServer can be embedded to have forward compatible implementations.
type UnimplementedRaftRPCServer struct {
}

func (*UnimplementedRaftRPCServer) JoinCaller(ctx context.Context, req *RemoteNode) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCaller not implemented")
}
func (*UnimplementedRaftRPCServer) StartNodeCaller(ctx context.Context, req *StartNodeRequest) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNodeCaller not implemented")
}
func (*UnimplementedRaftRPCServer) AppendEntriesCaller(ctx context.Context, req *AppendEntriesRequest) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntriesCaller not implemented")
}
func (*UnimplementedRaftRPCServer) RequestVoteCaller(ctx context.Context, req *RequestVoteRequest) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVoteCaller not implemented")
}

func RegisterRaftRPCServer(s *grpc.Server, srv RaftRPCServer) {
	s.RegisterService(&_RaftRPC_serviceDesc, srv)
}

func _RaftRPC_JoinCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).JoinCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RaftRPC/JoinCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).JoinCaller(ctx, req.(*RemoteNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_StartNodeCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).StartNodeCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RaftRPC/StartNodeCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).StartNodeCaller(ctx, req.(*StartNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_AppendEntriesCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).AppendEntriesCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RaftRPC/AppendEntriesCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).AppendEntriesCaller(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRPC_RequestVoteCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRPCServer).RequestVoteCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RaftRPC/RequestVoteCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRPCServer).RequestVoteCaller(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RaftRPC",
	HandlerType: (*RaftRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinCaller",
			Handler:    _RaftRPC_JoinCaller_Handler,
		},
		{
			MethodName: "StartNodeCaller",
			Handler:    _RaftRPC_StartNodeCaller_Handler,
		},
		{
			MethodName: "AppendEntriesCaller",
			Handler:    _RaftRPC_AppendEntriesCaller_Handler,
		},
		{
			MethodName: "RequestVoteCaller",
			Handler:    _RaftRPC_RequestVoteCaller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "some_kvstore_rpc.proto",
}

// ReplicationGroupRPCClient is the client API for ReplicationGroupRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicationGroupRPCClient interface {
	// Called by a client to make a request to a ReplicationGroup node
	ClientRequestCaller(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientReply, error)
}

type replicationGroupRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationGroupRPCClient(cc grpc.ClientConnInterface) ReplicationGroupRPCClient {
	return &replicationGroupRPCClient{cc}
}

func (c *replicationGroupRPCClient) ClientRequestCaller(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientReply, error) {
	out := new(ClientReply)
	err := c.cc.Invoke(ctx, "/rpc.ReplicationGroupRPC/ClientRequestCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationGroupRPCServer is the server API for ReplicationGroupRPC service.
type ReplicationGroupRPCServer interface {
	// Called by a client to make a request to a ReplicationGroup node
	ClientRequestCaller(context.Context, *ClientRequest) (*ClientReply, error)
}

// UnimplementedReplicationGroupRPCServer can be embedded to have forward compatible implementations.
type UnimplementedReplicationGroupRPCServer struct {
}

func (*UnimplementedReplicationGroupRPCServer) ClientRequestCaller(ctx context.Context, req *ClientRequest) (*ClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequestCaller not implemented")
}

func RegisterReplicationGroupRPCServer(s *grpc.Server, srv ReplicationGroupRPCServer) {
	s.RegisterService(&_ReplicationGroupRPC_serviceDesc, srv)
}

func _ReplicationGroupRPC_ClientRequestCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationGroupRPCServer).ClientRequestCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ReplicationGroupRPC/ClientRequestCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationGroupRPCServer).ClientRequestCaller(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReplicationGroupRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ReplicationGroupRPC",
	HandlerType: (*ReplicationGroupRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientRequestCaller",
			Handler:    _ReplicationGroupRPC_ClientRequestCaller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "some_kvstore_rpc.proto",
}

// ShardOrchestratorRPCClient is the client API for ShardOrchestratorRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShardOrchestratorRPCClient interface {
	// Called by a client when it first starts up to register itself with the
	// ReplicationGroup cluster and get a unique client id.
	RegisterClientCaller(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientReply, error)
	// Called by a client to make a request to a ReplicationGroup node
	ClientRequestCaller(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientReply, error)
}

type shardOrchestratorRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewShardOrchestratorRPCClient(cc grpc.ClientConnInterface) ShardOrchestratorRPCClient {
	return &shardOrchestratorRPCClient{cc}
}

func (c *shardOrchestratorRPCClient) RegisterClientCaller(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientReply, error) {
	out := new(RegisterClientReply)
	err := c.cc.Invoke(ctx, "/rpc.ShardOrchestratorRPC/RegisterClientCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardOrchestratorRPCClient) ClientRequestCaller(ctx context.Context, in *ClientRequest, opts ...grpc.CallOption) (*ClientReply, error) {
	out := new(ClientReply)
	err := c.cc.Invoke(ctx, "/rpc.ShardOrchestratorRPC/ClientRequestCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardOrchestratorRPCServer is the server API for ShardOrchestratorRPC service.
type ShardOrchestratorRPCServer interface {
	// Called by a client when it first starts up to register itself with the
	// ReplicationGroup cluster and get a unique client id.
	RegisterClientCaller(context.Context, *RegisterClientRequest) (*RegisterClientReply, error)
	// Called by a client to make a request to a ReplicationGroup node
	ClientRequestCaller(context.Context, *ClientRequest) (*ClientReply, error)
}

// UnimplementedShardOrchestratorRPCServer can be embedded to have forward compatible implementations.
type UnimplementedShardOrchestratorRPCServer struct {
}

func (*UnimplementedShardOrchestratorRPCServer) RegisterClientCaller(ctx context.Context, req *RegisterClientRequest) (*RegisterClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClientCaller not implemented")
}
func (*UnimplementedShardOrchestratorRPCServer) ClientRequestCaller(ctx context.Context, req *ClientRequest) (*ClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientRequestCaller not implemented")
}

func RegisterShardOrchestratorRPCServer(s *grpc.Server, srv ShardOrchestratorRPCServer) {
	s.RegisterService(&_ShardOrchestratorRPC_serviceDesc, srv)
}

func _ShardOrchestratorRPC_RegisterClientCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardOrchestratorRPCServer).RegisterClientCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ShardOrchestratorRPC/RegisterClientCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardOrchestratorRPCServer).RegisterClientCaller(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardOrchestratorRPC_ClientRequestCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardOrchestratorRPCServer).ClientRequestCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ShardOrchestratorRPC/ClientRequestCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardOrchestratorRPCServer).ClientRequestCaller(ctx, req.(*ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShardOrchestratorRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ShardOrchestratorRPC",
	HandlerType: (*ShardOrchestratorRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClientCaller",
			Handler:    _ShardOrchestratorRPC_RegisterClientCaller_Handler,
		},
		{
			MethodName: "ClientRequestCaller",
			Handler:    _ShardOrchestratorRPC_ClientRequestCaller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "some_kvstore_rpc.proto",
}
